package com.example.coffeemachine.domain;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

/**
 * Entity representing an alert generated by the coffee machine monitoring system.
 * 
 * Alerts are triggered when machines encounter issues such as low supply levels,
 * malfunctions, or other conditions requiring attention.
 */
@Entity
@Table(name = "alert",
       indexes = {
           @Index(name = "idx_alert_machine", columnList = "machine_id"),
           @Index(name = "idx_alert_type", columnList = "type"),
           @Index(name = "idx_alert_severity", columnList = "severity"),
           @Index(name = "idx_alert_resolved", columnList = "resolved"),
           @Index(name = "idx_alert_machine_type", columnList = "machine_id, type"),
           @Index(name = "idx_alert_unresolved", columnList = "machine_id, resolved, created_at")
       })
public class Alert extends BaseEntity {

    /**
     * The coffee machine that generated this alert.
     * Required relationship - every alert must belong to a machine.
     */
    @NotNull(message = "Alert must belong to a coffee machine")
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "machine_id", 
                nullable = false,
                foreignKey = @ForeignKey(name = "fk_alert_machine"))
    private CoffeeMachine machine;

    /**
     * Type of alert indicating the specific condition.
     */
    @NotNull(message = "Alert type is required")
    @Enumerated(EnumType.STRING)
    @Column(name = "type", nullable = false, length = 20)
    private AlertType type;

    /**
     * Severity level of the alert for prioritization.
     */
    @NotNull(message = "Alert severity is required")
    @Enumerated(EnumType.STRING)
    @Column(name = "severity", nullable = false, length = 10)
    private Severity severity;

    /**
     * Human-readable message describing the alert condition.
     */
    @NotBlank(message = "Alert message is required")
    @Size(min = 10, max = 500, message = "Alert message must be between 10 and 500 characters")
    @Column(name = "message", nullable = false, length = 500)
    private String message;

    /**
     * Threshold value that triggered this alert (if applicable).
     * For example, the percentage level that triggered a low supply alert.
     */
    @Column(name = "threshold_value")
    private Integer thresholdValue;

    /**
     * Flag indicating whether this alert has been resolved.
     * Allows tracking of alert lifecycle and resolution status.
     */
    @Column(name = "resolved", nullable = false)
    private Boolean resolved = false;

    /**
     * Constructor for creating a new alert.
     */
    public Alert() {
    }

    public Alert(CoffeeMachine machine, AlertType type, Severity severity, String message) {
        this.machine = machine;
        this.type = type;
        this.severity = severity;
        this.message = message;
        this.resolved = false;
    }

    /**
     * Constructor with threshold value.
     */
    public Alert(CoffeeMachine machine, AlertType type, Severity severity, 
                String message, Integer thresholdValue) {
        this.machine = machine;
        this.type = type;
        this.severity = severity;
        this.message = message;
        this.thresholdValue = thresholdValue;
        this.resolved = false;
    }

    /**
     * Mark this alert as resolved.
     * Updates the resolved flag to indicate the issue has been addressed.
     */
    public void resolve() {
        this.resolved = true;
    }

    /**
     * Reopen this alert if the condition reoccurs.
     * Updates the resolved flag to indicate the issue is active again.
     */
    public void reopen() {
        this.resolved = false;
    }

    /**
     * Check if this alert is currently active (not resolved).
     */
    public boolean isActiveAlert() {
        return isActive() && !resolved;
    }

    /**
     * Get the facility ID through the machine relationship.
     * Useful for facility-level alert management.
     */
    public Long getFacilityId() {
        return machine != null && machine.getFacility() != null ? 
               machine.getFacility().getId() : null;
    }

    /**
     * Get the facility name through the machine relationship.
     */
    public String getFacilityName() {
        return machine != null && machine.getFacility() != null ? 
               machine.getFacility().getName() : null;
    }

    /**
     * Check if this is a critical alert requiring immediate attention.
     */
    public boolean isCritical() {
        return severity == Severity.CRITICAL;
    }

    /**
     * Check if this is a supply-related alert.
     */
    public boolean isSupplyAlert() {
        return type == AlertType.LOW_WATER || 
               type == AlertType.LOW_MILK || 
               type == AlertType.LOW_BEANS;
    }

    /**
     * Check if this is a malfunction alert.
     */
    public boolean isMalfunctionAlert() {
        return type == AlertType.MALFUNCTION;
    }

    /**
     * Generate a summary description for this alert.
     */
    public String getSummary() {
        String facilityName = getFacilityName();
        String machineInfo = facilityName != null ? 
            String.format("Machine at %s", facilityName) : 
            String.format("Machine ID %d", machine.getId());
            
        return String.format("[%s] %s: %s", 
                           severity.name(), 
                           machineInfo, 
                           getShortMessage());
    }

    /**
     * Get a shortened version of the alert message.
     */
    public String getShortMessage() {
        if (message == null) return "";
        return message.length() > 100 ? 
               message.substring(0, 97) + "..." : 
               message;
    }

    /**
     * Create a standard alert message based on type and threshold.
     */
    public static String createStandardMessage(AlertType type, Integer thresholdValue) {
        return switch (type) {
            case LOW_WATER -> String.format("Water level has dropped below %d%% threshold", thresholdValue);
            case LOW_MILK -> String.format("Milk level has dropped below %d%% threshold", thresholdValue);
            case LOW_BEANS -> String.format("Coffee beans level has dropped below %d%% threshold", thresholdValue);
            case MALFUNCTION -> "Machine has encountered an error and requires attention";
        };
    }

    /**
     * Determine severity based on alert type and threshold.
     */
    public static Severity determineSeverity(AlertType type, Integer currentLevel) {
        return switch (type) {
            case MALFUNCTION -> Severity.CRITICAL;
            case LOW_WATER, LOW_MILK, LOW_BEANS -> {
                if (currentLevel != null) {
                    if (currentLevel <= 10) yield Severity.CRITICAL;
                    if (currentLevel <= 20) yield Severity.WARNING;
                }
                yield Severity.INFO;
            }
        };
    }

    @PrePersist
    protected void onCreate() {
        super.onCreate();
        if (resolved == null) {
            resolved = false;
        }
    }

    // Manual accessors
    public CoffeeMachine getMachine() { return machine; }
    public void setMachine(CoffeeMachine machine) { this.machine = machine; }
    public AlertType getType() { return type; }
    public void setType(AlertType type) { this.type = type; }
    public Severity getSeverity() { return severity; }
    public void setSeverity(Severity severity) { this.severity = severity; }
    public String getMessage() { return message; }
    public void setMessage(String message) { this.message = message; }
    public Integer getThresholdValue() { return thresholdValue; }
    public void setThresholdValue(Integer thresholdValue) { this.thresholdValue = thresholdValue; }
    public Boolean getResolved() { return resolved; }
    public void setResolved(Boolean resolved) { this.resolved = resolved; }
}